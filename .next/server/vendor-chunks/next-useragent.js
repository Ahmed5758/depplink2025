"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-useragent";
exports.ids = ["vendor-chunks/next-useragent"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-useragent/dist/next-useragent.js":
/*!************************************************************!*\
  !*** ./node_modules/next-useragent/dist/next-useragent.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar uaParserJs = __webpack_require__(/*! ua-parser-js */ \"(ssr)/./node_modules/ua-parser-js/src/ua-parser.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/ _interopNamespace(React);\nvar BOT_UA = [\n    \"\\\\+https:\\\\/\\\\/developers.google.com\\\\/\\\\+\\\\/web\\\\/snippet\\\\/\",\n    \"googlebot\",\n    \"baiduspider\",\n    \"gurujibot\",\n    \"yandexbot\",\n    \"slurp\",\n    \"msnbot\",\n    \"bingbot\",\n    \"facebookexternalhit\",\n    \"linkedinbot\",\n    \"twitterbot\",\n    \"slackbot\",\n    \"telegrambot\",\n    \"applebot\",\n    \"pingdom\",\n    \"tumblr\"\n];\n/**\r\n * Get the information of an useragent string.\r\n *\r\n * @param phrase user agent strings.\r\n * @returns parsed information.\r\n */ function parse(phrase) {\n    var result = new uaParserJs.UAParser(phrase).getResult();\n    var regex = new RegExp(\"(\" + BOT_UA.join(\"|\") + \")\", \"ig\");\n    var isBot = phrase ? regex.test(phrase.toLowerCase()) : false;\n    var browser = result.browser.name;\n    var deviceType = result.device.type || null;\n    var os = result.os.name;\n    var engine = result.engine.name;\n    var isMobile = deviceType === \"mobile\";\n    var isTablet = deviceType === \"tablet\";\n    var isIos = os === \"iOS\";\n    var ua = Object.freeze({\n        browser: browser,\n        deviceType: deviceType,\n        os: os,\n        engine: engine,\n        isMobile: isMobile,\n        isTablet: isTablet,\n        isIos: isIos,\n        source: phrase,\n        deviceVendor: result.device.vendor || null,\n        osVersion: parseInt(result.os.version, 10),\n        browserVersion: parseFloat(result.browser.version),\n        engineVersion: parseFloat(result.engine.version),\n        isIphone: isMobile && isIos,\n        isIpad: isTablet && isIos,\n        isDesktop: !isMobile && !isTablet,\n        isChrome: browser === \"Chrome\",\n        isFirefox: browser === \"Firefox\",\n        isSafari: browser === \"Safari\",\n        isIE: browser === \"IE\",\n        isEdge: browser === \"Edge\",\n        isOpera: browser === \"Opera\",\n        isMac: os === \"Mac OS\",\n        isChromeOS: os === \"Chromium OS\",\n        isWindows: os === \"Windows\",\n        isAndroid: os === \"Android\",\n        isBot: isBot\n    });\n    return ua;\n}\nfunction useUserAgent(phase) {\n    return parse(phase);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\n/* tslint:disable: variable-name */ function withUserAgent(ComposedComponent) {\n    var _this = this;\n    var name = ComposedComponent.displayName || ComposedComponent.name;\n    var ua;\n    var WithUserAgentWrapper = /** @class */ function(_super) {\n        __extends(WithUserAgentWrapper, _super);\n        function WithUserAgentWrapper() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        WithUserAgentWrapper.prototype.render = function() {\n            if (!ua && \"undefined\" !== \"undefined\") {}\n            return React__namespace.createElement(ComposedComponent, __assign({\n                ua: ua\n            }, this.props));\n        };\n        WithUserAgentWrapper.displayName = \"withUserAgent(\" + name + \")\";\n        return WithUserAgentWrapper;\n    }(React__namespace.Component);\n    if (ComposedComponent.getInitialProps) {\n        WithUserAgentWrapper.getInitialProps = function(context) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var initialProps, uaString;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            initialProps = {};\n                            uaString = \"\";\n                            if (typeof context.req !== \"undefined\") {\n                                uaString = context.req.headers[\"user-agent\"];\n                            } else if (false) {}\n                            ua = parse(uaString);\n                            context.ua = Object.assign({}, ua);\n                            return [\n                                4 /*yield*/ ,\n                                ComposedComponent.getInitialProps(context)\n                            ];\n                        case 1:\n                            initialProps = _a.sent();\n                            if (context.ua) {\n                                delete context.ua;\n                            }\n                            return [\n                                2 /*return*/ ,\n                                initialProps\n                            ];\n                    }\n                });\n            });\n        };\n    }\n    return WithUserAgentWrapper;\n}\nexports.parse = parse;\nexports.useUserAgent = useUserAgent;\nexports.withUserAgent = withUserAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-useragent/dist/next-useragent.js\n");

/***/ })

};
;