"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-async-script";
exports.ids = ["vendor-chunks/react-async-script"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-async-script/lib/esm/async-script-loader.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-async-script/lib/esm/async-script-loader.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ makeAsyncScript)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hoist-non-react-statics */ \"(ssr)/./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1__);\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\n\n\n\nvar SCRIPT_MAP = {}; // A counter used to generate a unique id for each component that uses the function\nvar idCount = 0;\nfunction makeAsyncScript(getScriptURL, options) {\n    options = options || {};\n    return function wrapWithAsyncScript(WrappedComponent) {\n        var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n        var AsyncScriptLoader = /*#__PURE__*/ function(_Component) {\n            _inheritsLoose(AsyncScriptLoader, _Component);\n            function AsyncScriptLoader(props, context) {\n                var _this;\n                _this = _Component.call(this, props, context) || this;\n                _this.state = {};\n                _this.__scriptURL = \"\";\n                return _this;\n            }\n            var _proto = AsyncScriptLoader.prototype;\n            _proto.asyncScriptLoaderGetScriptLoaderID = function asyncScriptLoaderGetScriptLoaderID() {\n                if (!this.__scriptLoaderID) {\n                    this.__scriptLoaderID = \"async-script-loader-\" + idCount++;\n                }\n                return this.__scriptLoaderID;\n            };\n            _proto.setupScriptURL = function setupScriptURL() {\n                this.__scriptURL = typeof getScriptURL === \"function\" ? getScriptURL() : getScriptURL;\n                return this.__scriptURL;\n            };\n            _proto.asyncScriptLoaderHandleLoad = function asyncScriptLoaderHandleLoad(state) {\n                var _this2 = this;\n                // use reacts setState callback to fire props.asyncScriptOnLoad with new state/entry\n                this.setState(state, function() {\n                    return _this2.props.asyncScriptOnLoad && _this2.props.asyncScriptOnLoad(_this2.state);\n                });\n            };\n            _proto.asyncScriptLoaderTriggerOnScriptLoaded = function asyncScriptLoaderTriggerOnScriptLoaded() {\n                var mapEntry = SCRIPT_MAP[this.__scriptURL];\n                if (!mapEntry || !mapEntry.loaded) {\n                    throw new Error(\"Script is not loaded.\");\n                }\n                for(var obsKey in mapEntry.observers){\n                    mapEntry.observers[obsKey](mapEntry);\n                }\n                delete window[options.callbackName];\n            };\n            _proto.componentDidMount = function componentDidMount() {\n                var _this3 = this;\n                var scriptURL = this.setupScriptURL();\n                var key = this.asyncScriptLoaderGetScriptLoaderID();\n                var _options = options, globalName = _options.globalName, callbackName = _options.callbackName, scriptId = _options.scriptId; // check if global object already attached to window\n                if (globalName && typeof window[globalName] !== \"undefined\") {\n                    SCRIPT_MAP[scriptURL] = {\n                        loaded: true,\n                        observers: {}\n                    };\n                } // check if script loading already\n                if (SCRIPT_MAP[scriptURL]) {\n                    var entry = SCRIPT_MAP[scriptURL]; // if loaded or errored then \"finish\"\n                    if (entry && (entry.loaded || entry.errored)) {\n                        this.asyncScriptLoaderHandleLoad(entry);\n                        return;\n                    } // if still loading then callback to observer queue\n                    entry.observers[key] = function(entry) {\n                        return _this3.asyncScriptLoaderHandleLoad(entry);\n                    };\n                    return;\n                }\n                /*\n         * hasn't started loading\n         * start the \"magic\"\n         * setup script to load and observers\n         */ var observers = {};\n                observers[key] = function(entry) {\n                    return _this3.asyncScriptLoaderHandleLoad(entry);\n                };\n                SCRIPT_MAP[scriptURL] = {\n                    loaded: false,\n                    observers: observers\n                };\n                var script = document.createElement(\"script\");\n                script.src = scriptURL;\n                script.async = true;\n                for(var attribute in options.attributes){\n                    script.setAttribute(attribute, options.attributes[attribute]);\n                }\n                if (scriptId) {\n                    script.id = scriptId;\n                }\n                var callObserverFuncAndRemoveObserver = function callObserverFuncAndRemoveObserver(func) {\n                    if (SCRIPT_MAP[scriptURL]) {\n                        var mapEntry = SCRIPT_MAP[scriptURL];\n                        var observersMap = mapEntry.observers;\n                        for(var obsKey in observersMap){\n                            if (func(observersMap[obsKey])) {\n                                delete observersMap[obsKey];\n                            }\n                        }\n                    }\n                };\n                if (callbackName && \"undefined\" !== \"undefined\") {}\n                script.onload = function() {\n                    var mapEntry = SCRIPT_MAP[scriptURL];\n                    if (mapEntry) {\n                        mapEntry.loaded = true;\n                        callObserverFuncAndRemoveObserver(function(observer) {\n                            if (callbackName) {\n                                return false;\n                            }\n                            observer(mapEntry);\n                            return true;\n                        });\n                    }\n                };\n                script.onerror = function() {\n                    var mapEntry = SCRIPT_MAP[scriptURL];\n                    if (mapEntry) {\n                        mapEntry.errored = true;\n                        callObserverFuncAndRemoveObserver(function(observer) {\n                            observer(mapEntry);\n                            return true;\n                        });\n                    }\n                };\n                document.body.appendChild(script);\n            };\n            _proto.componentWillUnmount = function componentWillUnmount() {\n                // Remove tag script\n                var scriptURL = this.__scriptURL;\n                if (options.removeOnUnmount === true) {\n                    var allScripts = document.getElementsByTagName(\"script\");\n                    for(var i = 0; i < allScripts.length; i += 1){\n                        if (allScripts[i].src.indexOf(scriptURL) > -1) {\n                            if (allScripts[i].parentNode) {\n                                allScripts[i].parentNode.removeChild(allScripts[i]);\n                            }\n                        }\n                    }\n                } // Clean the observer entry\n                var mapEntry = SCRIPT_MAP[scriptURL];\n                if (mapEntry) {\n                    delete mapEntry.observers[this.asyncScriptLoaderGetScriptLoaderID()];\n                    if (options.removeOnUnmount === true) {\n                        delete SCRIPT_MAP[scriptURL];\n                    }\n                }\n            };\n            _proto.render = function render() {\n                var globalName = options.globalName; // remove asyncScriptOnLoad from childProps\n                var _this$props = this.props, asyncScriptOnLoad = _this$props.asyncScriptOnLoad, forwardedRef = _this$props.forwardedRef, childProps = _objectWithoutPropertiesLoose(_this$props, [\n                    \"asyncScriptOnLoad\",\n                    \"forwardedRef\"\n                ]); // eslint-disable-line no-unused-vars\n                if (globalName && \"undefined\" !== \"undefined\") {}\n                childProps.ref = forwardedRef;\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(WrappedComponent, childProps);\n            };\n            return AsyncScriptLoader;\n        }(react__WEBPACK_IMPORTED_MODULE_0__.Component); // Note the second param \"ref\" provided by React.forwardRef.\n        // We can pass it along to AsyncScriptLoader as a regular prop, e.g. \"forwardedRef\"\n        // And it can then be attached to the Component.\n        var ForwardedComponent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(props, ref) {\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(AsyncScriptLoader, _extends({}, props, {\n                forwardedRef: ref\n            }));\n        });\n        ForwardedComponent.displayName = \"AsyncScriptLoader(\" + wrappedComponentName + \")\";\n        ForwardedComponent.propTypes = {\n            asyncScriptOnLoad: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func)\n        };\n        return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default()(ForwardedComponent, WrappedComponent);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-async-script/lib/esm/async-script-loader.js\n");

/***/ })

};
;